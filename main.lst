CCS PCM C Compiler, Version 4.130, 59972               22-ene.-17 12:23

               Filename: B:\Giancarlos\Documentos\Proteus 8\Ecuador\main.lst

               ROM used: 1883 words (23%)
                         Largest free fragment is 2048
               RAM used: 49 (13%) at main() level
                         83 (23%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   53D
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   037
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #device adc=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(clock=4M) 
*
0058:  MOVLW  62
0059:  MOVWF  04
005A:  BCF    03.7
005B:  MOVF   00,W
005C:  BTFSC  03.2
005D:  GOTO   06C
005E:  MOVLW  01
005F:  MOVWF  78
0060:  CLRF   77
0061:  DECFSZ 77,F
0062:  GOTO   061
0063:  DECFSZ 78,F
0064:  GOTO   060
0065:  MOVLW  4A
0066:  MOVWF  77
0067:  DECFSZ 77,F
0068:  GOTO   067
0069:  GOTO   06A
006A:  DECFSZ 00,F
006B:  GOTO   05E
006C:  RETURN
....................  
.................... #define LCD_ENABLE_PIN PIN_C7 
.................... #define LCD_RS_PIN PIN_C5 
.................... #define LCD_RW_PIN PIN_C6 
.................... #define LCD_Data4  PIN_D4 
.................... #define LCD_Data5  PIN_D5 
.................... #define LCD_Data6  PIN_D6 
.................... #define LCD_Data7  PIN_D7 
....................  
....................  
.................... #define LCD_DB4   PIN_B4  
.................... #define LCD_DB5   PIN_B5  
.................... #define LCD_DB6   PIN_B6  
.................... #define LCD_DB7   PIN_B7  
....................  
.................... #define LCD_RS    PIN_C5  
.................... #define LCD_RW    PIN_C6  
.................... #define LCD_E     PIN_C7  
....................  
.................... #include <lcd416.c> 
.................... // LCD416.c 
....................  
.................... // These pins are for my Microchip PicDem2-Plus board,  
.................... // which I used to test this driver.  
.................... // An external 20x4 LCD is connected to these pins.  
.................... // Change these pins to match your own board's connections.  
.................... #ifndef LCD_E 
.................... #define LCD_DB4   PIN_B4  
.................... #define LCD_DB5   PIN_B5  
.................... #define LCD_DB6   PIN_B6  
.................... #define LCD_DB7   PIN_B7  
....................  
.................... #define LCD_RS    PIN_C4  
.................... #define LCD_RW    PIN_C5  
.................... #define LCD_E     PIN_C6  
.................... #endif 
.................... /*  
.................... // To prove that the driver can be used with random  
.................... // pins, I also tested it with these pins:  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_B1  
.................... #define LCD_DB6   PIN_C5  
.................... #define LCD_DB7   PIN_B5  
....................  
.................... #define LCD_RS    PIN_E2  
.................... #define LCD_RW    PIN_B2  
.................... #define LCD_E     PIN_D6  
.................... */  
....................  
.................... // If you want only a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  Doing so will save one PIC  
.................... // pin, but at the cost of losing the ability to read from  
.................... // the LCD.  It also makes the write time a little longer  
.................... // because a static delay must be used, instead of polling  
.................... // the LCD's busy bit.  Normally a 6-pin interface is only  
.................... // used if you are running out of PIC pins, and you need  
.................... // to use as few as possible for the LCD.  
.................... #define USE_RW_PIN   1       
....................  
....................  
.................... // These are the line addresses for most 4x20 LCDs.  
.................... #define LCD_LINE_1_ADDRESS 0x00  
.................... #define LCD_LINE_2_ADDRESS 0x40  
.................... #define LCD_LINE_3_ADDRESS 0x10  
.................... #define LCD_LINE_4_ADDRESS 0x50  
....................  
.................... // These are the line addresses for LCD's which use  
.................... // the Hitachi HD66712U controller chip.  
.................... /*  
.................... #define LCD_LINE_1_ADDRESS 0x00  
.................... #define LCD_LINE_2_ADDRESS 0x20  
.................... #define LCD_LINE_3_ADDRESS 0x40  
.................... #define LCD_LINE_4_ADDRESS 0x60  
.................... */  
....................  
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2   // 0=5x7, 1=5x10, 2=2 lines(or more)  
....................  
.................... int8 lcd_line;  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2),  // Set mode: 4-bit, 2+ lines, 5x8 dots  
....................  0xc,                     // Display on  
....................  1,                       // Clear display  
....................  6                        // Increment cursor  
....................  };  
....................  
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
006D:  BTFSC  69.0
006E:  GOTO   071
006F:  BCF    06.4
0070:  GOTO   072
0071:  BSF    06.4
0072:  BSF    03.5
0073:  BCF    06.4
....................  output_bit(LCD_DB5, !!(nibble & 2));  
0074:  BCF    03.5
0075:  BTFSC  69.1
0076:  GOTO   079
0077:  BCF    06.5
0078:  GOTO   07A
0079:  BSF    06.5
007A:  BSF    03.5
007B:  BCF    06.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
007C:  BCF    03.5
007D:  BTFSC  69.2
007E:  GOTO   081
007F:  BCF    06.6
0080:  GOTO   082
0081:  BSF    06.6
0082:  BSF    03.5
0083:  BCF    06.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
0084:  BCF    03.5
0085:  BTFSC  69.3
0086:  GOTO   089
0087:  BCF    06.7
0088:  GOTO   08A
0089:  BSF    06.7
008A:  BSF    03.5
008B:  BCF    06.7
....................  
....................  delay_cycles(1);  
008C:  NOP
....................  output_high(LCD_E);  
008D:  BCF    03.5
008E:  BCF    28.7
008F:  MOVF   28,W
0090:  BSF    03.5
0091:  MOVWF  07
0092:  BCF    03.5
0093:  BSF    07.7
....................  delay_us(2);  
0094:  GOTO   095
....................  output_low(LCD_E);  
0095:  BCF    28.7
0096:  MOVF   28,W
0097:  BSF    03.5
0098:  MOVWF  07
0099:  BCF    03.5
009A:  BCF    07.7
.................... }  
009B:  RETURN
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_RW_PIN  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
009C:  CLRF   6A
....................      
.................... output_high(LCD_E);  
009D:  BCF    28.7
009E:  MOVF   28,W
009F:  BSF    03.5
00A0:  MOVWF  07
00A1:  BCF    03.5
00A2:  BSF    07.7
.................... delay_us(1);  
00A3:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
00A4:  BSF    03.5
00A5:  BSF    06.4
00A6:  BCF    03.5
00A7:  BCF    6A.0
00A8:  BTFSC  06.4
00A9:  BSF    6A.0
.................... retval_1 = input(LCD_DB5);  
00AA:  BSF    03.5
00AB:  BSF    06.5
00AC:  BCF    03.5
00AD:  BCF    6A.1
00AE:  BTFSC  06.5
00AF:  BSF    6A.1
.................... retval_2 = input(LCD_DB6);  
00B0:  BSF    03.5
00B1:  BSF    06.6
00B2:  BCF    03.5
00B3:  BCF    6A.2
00B4:  BTFSC  06.6
00B5:  BSF    6A.2
.................... retval_3 = input(LCD_DB7);  
00B6:  BSF    03.5
00B7:  BSF    06.7
00B8:  BCF    03.5
00B9:  BCF    6A.3
00BA:  BTFSC  06.7
00BB:  BSF    6A.3
....................    
.................... output_low(LCD_E);  
00BC:  BCF    28.7
00BD:  MOVF   28,W
00BE:  BSF    03.5
00BF:  MOVWF  07
00C0:  BCF    03.5
00C1:  BCF    07.7
.................... delay_us(1);  
00C2:  NOP
....................      
.................... return(retval);     
00C3:  MOVF   6A,W
00C4:  MOVWF  78
.................... }     
00C5:  RETURN
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_RW_PIN  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
00CC:  BCF    28.6
00CD:  MOVF   28,W
00CE:  BSF    03.5
00CF:  MOVWF  07
00D0:  BCF    03.5
00D1:  BSF    07.6
.................... delay_cycles(1);  
00D2:  NOP
....................  
.................... high = lcd_read_nibble();  
00D3:  CALL   09C
00D4:  MOVF   78,W
00D5:  MOVWF  69
....................  
.................... low = lcd_read_nibble();  
00D6:  CALL   09C
00D7:  MOVF   78,W
00D8:  MOVWF  68
....................  
.................... return( (high<<4) | low);  
00D9:  SWAPF  69,W
00DA:  MOVWF  77
00DB:  MOVLW  F0
00DC:  ANDWF  77,F
00DD:  MOVF   77,W
00DE:  IORWF  68,W
00DF:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
00C6:  BCF    28.5
00C7:  MOVF   28,W
00C8:  BSF    03.5
00C9:  MOVWF  07
00CA:  BCF    03.5
00CB:  BCF    07.5
....................  
.................... #ifdef USE_RW_PIN  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
00E0:  MOVF   78,W
00E1:  MOVWF  68
00E2:  BTFSC  68.7
00E3:  GOTO   0CC
.................... #else  
.................... delay_us(60);  
.................... #endif  
....................  
.................... if(address)  
00E4:  MOVF   66,F
00E5:  BTFSC  03.2
00E6:  GOTO   0EE
....................    output_high(LCD_RS);  
00E7:  BCF    28.5
00E8:  MOVF   28,W
00E9:  BSF    03.5
00EA:  MOVWF  07
00EB:  BCF    03.5
00EC:  BSF    07.5
.................... else  
00ED:  GOTO   0F4
....................    output_low(LCD_RS);  
00EE:  BCF    28.5
00EF:  MOVF   28,W
00F0:  BSF    03.5
00F1:  MOVWF  07
00F2:  BCF    03.5
00F3:  BCF    07.5
....................        
....................  delay_cycles(1);  
00F4:  NOP
....................  
.................... #ifdef USE_RW_PIN  
.................... output_low(LCD_RW);  
00F5:  BCF    28.6
00F6:  MOVF   28,W
00F7:  BSF    03.5
00F8:  MOVWF  07
00F9:  BCF    03.5
00FA:  BCF    07.6
.................... delay_cycles(1);  
00FB:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
00FC:  BCF    28.7
00FD:  MOVF   28,W
00FE:  BSF    03.5
00FF:  MOVWF  07
0100:  BCF    03.5
0101:  BCF    07.7
....................  
.................... lcd_send_nibble(n >> 4);  
0102:  SWAPF  67,W
0103:  MOVWF  68
0104:  MOVLW  0F
0105:  ANDWF  68,F
0106:  MOVF   68,W
0107:  MOVWF  69
0108:  CALL   06D
.................... lcd_send_nibble(n & 0xf);  
0109:  MOVF   67,W
010A:  ANDLW  0F
010B:  MOVWF  68
010C:  MOVWF  69
010D:  CALL   06D
.................... }  
010E:  RETURN
.................... //----------------------------  
....................  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... lcd_line = 1;  
010F:  MOVLW  01
0110:  MOVWF  27
....................  
.................... output_low(LCD_RS);  
0111:  BCF    28.5
0112:  MOVF   28,W
0113:  BSF    03.5
0114:  MOVWF  07
0115:  BCF    03.5
0116:  BCF    07.5
....................  
.................... #ifdef USE_RW_PIN  
.................... output_low(LCD_RW);  
0117:  BCF    28.6
0118:  MOVF   28,W
0119:  BSF    03.5
011A:  MOVWF  07
011B:  BCF    03.5
011C:  BCF    07.6
.................... #endif  
....................  
.................... output_low(LCD_E);  
011D:  BCF    28.7
011E:  MOVF   28,W
011F:  BSF    03.5
0120:  MOVWF  07
0121:  BCF    03.5
0122:  BCF    07.7
....................  
.................... // Some LCDs require 15 ms minimum delay after  
.................... // power-up.  Others require 30 ms.  I'm going  
.................... // to set it to 35 ms, so it should work with  
.................... // all of them.  
.................... delay_ms(35);           
0123:  MOVLW  23
0124:  MOVWF  62
0125:  CALL   058
....................  
.................... for(i=0 ;i < 3; i++)  
0126:  CLRF   48
0127:  MOVF   48,W
0128:  SUBLW  02
0129:  BTFSS  03.0
012A:  GOTO   133
....................    {  
....................     lcd_send_nibble(0x03);  
012B:  MOVLW  03
012C:  MOVWF  69
012D:  CALL   06D
....................     delay_ms(5);  
012E:  MOVLW  05
012F:  MOVWF  62
0130:  CALL   058
....................    }  
0131:  INCF   48,F
0132:  GOTO   127
....................  
.................... lcd_send_nibble(0x02);  
0133:  MOVLW  02
0134:  MOVWF  69
0135:  CALL   06D
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
0136:  CLRF   48
0137:  MOVF   48,W
0138:  SUBLW  03
0139:  BTFSS  03.0
013A:  GOTO   144
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
013B:  MOVF   48,W
013C:  CALL   02F
013D:  MOVWF  49
013E:  CLRF   66
013F:  MOVF   49,W
0140:  MOVWF  67
0141:  CALL   0C6
....................  
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 50 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_RW_PIN  
....................     delay_ms(5);  
....................     #endif  
....................    }  
0142:  INCF   48,F
0143:  GOTO   137
....................  
.................... }  
0144:  BCF    0A.3
0145:  BCF    0A.4
0146:  GOTO   569 (RETURN)
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
....................  
.................... switch(y)  
....................   {  
0147:  MOVF   63,W
0148:  XORLW  01
0149:  BTFSC  03.2
014A:  GOTO   155
014B:  XORLW  03
014C:  BTFSC  03.2
014D:  GOTO   157
014E:  XORLW  01
014F:  BTFSC  03.2
0150:  GOTO   15A
0151:  XORLW  07
0152:  BTFSC  03.2
0153:  GOTO   15D
0154:  GOTO   160
....................    case 1:  
....................      address = LCD_LINE_1_ADDRESS;  
0155:  CLRF   64
....................      break;  
0156:  GOTO   162
....................  
....................    case 2:  
....................      address = LCD_LINE_2_ADDRESS;  
0157:  MOVLW  40
0158:  MOVWF  64
....................      break;  
0159:  GOTO   162
....................  
....................    case 3:  
....................      address = LCD_LINE_3_ADDRESS;  
015A:  MOVLW  10
015B:  MOVWF  64
....................      break;  
015C:  GOTO   162
....................  
....................    case 4:  
....................      address = LCD_LINE_4_ADDRESS;  
015D:  MOVLW  50
015E:  MOVWF  64
....................      break;  
015F:  GOTO   162
....................  
....................    default:  
....................      address = LCD_LINE_1_ADDRESS;  
0160:  CLRF   64
....................      break;  
0161:  GOTO   162
....................        
....................   }  
....................  
.................... address += x-1;  
0162:  MOVLW  01
0163:  SUBWF  62,W
0164:  ADDWF  64,F
.................... lcd_send_byte(0, 0x80 | address);  
0165:  MOVF   64,W
0166:  IORLW  80
0167:  MOVWF  65
0168:  CLRF   66
0169:  MOVF   65,W
016A:  MOVWF  67
016B:  CALL   0C6
.................... }  
016C:  RETURN
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
....................    {  
016D:  MOVF   61,W
016E:  XORLW  0C
016F:  BTFSC  03.2
0170:  GOTO   178
0171:  XORLW  06
0172:  BTFSC  03.2
0173:  GOTO   182
0174:  XORLW  02
0175:  BTFSC  03.2
0176:  GOTO   189
0177:  GOTO   18E
....................     case '\f':  
....................       lcd_send_byte(0,1);  
0178:  CLRF   66
0179:  MOVLW  01
017A:  MOVWF  67
017B:  CALL   0C6
....................       lcd_line = 1;  
017C:  MOVLW  01
017D:  MOVWF  27
....................       delay_ms(2);  
017E:  MOVLW  02
017F:  MOVWF  62
0180:  CALL   058
....................       break;  
0181:  GOTO   194
....................      
....................     case '\n':  
....................        lcd_gotoxy(1, ++lcd_line);  
0182:  INCF   27,F
0183:  MOVLW  01
0184:  MOVWF  62
0185:  MOVF   27,W
0186:  MOVWF  63
0187:  CALL   147
....................        break;  
0188:  GOTO   194
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
0189:  CLRF   66
018A:  MOVLW  10
018B:  MOVWF  67
018C:  CALL   0C6
....................        break;  
018D:  GOTO   194
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
018E:  MOVLW  01
018F:  MOVWF  66
0190:  MOVF   61,W
0191:  MOVWF  67
0192:  CALL   0C6
....................        break;  
0193:  GOTO   194
....................    }  
.................... }  
0194:  RETURN
....................  
.................... //------------------------------  
.................... #ifdef USE_RW_PIN  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));  
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(LCD_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif  
....................  
....................  
.................... #define TIMER_VALUE 100 // 256 -  10ms/(64 * 4/4Mhz)  => 99.75  
....................  
.................... int16 miliseconds; 
....................  
.................... void show(int x, int y, char nadador, float time); 
.................... void show2(int x, int y, char nadador, float time); 
....................  
.................... #INT_TIMER0   //Activa la interrupcion, por Timer  
.................... void timer0_isr() 
.................... { 
....................    miliseconds += 10; 
*
0037:  MOVLW  0A
0038:  ADDWF  29,F
0039:  BTFSC  03.0
003A:  INCF   2A,F
....................    set_timer0(TIMER_VALUE); // Valor del timer para 10ms. 
003B:  MOVLW  64
003C:  MOVWF  01
.................... } 
....................  
003D:  BCF    0B.2
003E:  BCF    0A.3
003F:  BCF    0A.4
0040:  GOTO   01B
.................... void main() 
.................... { 
*
053D:  CLRF   04
053E:  BCF    03.7
053F:  MOVLW  1F
0540:  ANDWF  03,F
0541:  MOVLW  FF
0542:  MOVWF  28
0543:  BSF    03.5
0544:  BSF    03.6
0545:  MOVF   09,W
0546:  ANDLW  C0
0547:  MOVWF  09
0548:  BCF    03.6
0549:  BCF    1F.4
054A:  BCF    1F.5
054B:  MOVLW  00
054C:  BSF    03.6
054D:  MOVWF  08
054E:  BCF    03.5
054F:  CLRF   07
0550:  CLRF   08
0551:  CLRF   09
*
0557:  CLRF   30
....................    // Variables 
....................    int8 puestos[] = {0,0,0,0}, portB, count = 0; // Almacena los puestos 
*
0552:  BCF    03.6
0553:  CLRF   2B
0554:  CLRF   2C
0555:  CLRF   2D
0556:  CLRF   2E
....................    float tiempos[] = {0,0,0,0}, seconds; // Almacena los tiempos segun el puesto. 
*
0558:  CLRF   31
0559:  CLRF   32
055A:  CLRF   33
055B:  CLRF   34
055C:  CLRF   35
055D:  CLRF   36
055E:  CLRF   37
055F:  CLRF   38
0560:  CLRF   39
0561:  CLRF   3A
0562:  CLRF   3B
0563:  CLRF   3C
0564:  CLRF   3D
0565:  CLRF   3E
0566:  CLRF   3F
0567:  CLRF   40
....................    int16 ultimo; 
....................  
....................    // Inicializacion del LCD 4x16 
....................    lcd_init(); 
0568:  GOTO   10F
....................     
....................    // Input pins 
....................    set_tris_b(0xFF); // Puerto B como entradas. 
0569:  MOVLW  FF
056A:  BSF    03.5
056B:  MOVWF  06
....................     
....................    // Interrupcion Timer 0 
....................    setup_timer_0(T0_INTERNAL|T0_DIV_64);  
056C:  MOVF   01,W
056D:  ANDLW  C0
056E:  IORLW  05
056F:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); //habilitar la interrupcion del timer0 
0570:  BCF    03.5
0571:  BSF    0B.5
....................  
....................    printf(LCD_PUTC,"Presione START"); 
0572:  MOVLW  41
0573:  BSF    03.6
0574:  MOVWF  0D
0575:  MOVLW  00
0576:  MOVWF  0F
0577:  BCF    03.6
0578:  CALL   195
....................    while (!input(PIN_B7)); // Espera que pulse START. 
0579:  BSF    03.5
057A:  BSF    06.7
057B:  BCF    03.5
057C:  BTFSS  06.7
057D:  GOTO   579
....................    lcd_putc('\f'); 
057E:  MOVLW  0C
057F:  MOVWF  61
0580:  CALL   16D
....................    enable_interrupts(GLOBAL); //interrupcion global 
0581:  MOVLW  C0
0582:  IORWF  0B,F
....................    set_timer0(TIMER_VALUE); // Pone el valor del timer para 10ms 
0583:  MOVLW  64
0584:  MOVWF  01
....................     
....................    while(TRUE) 
....................    { 
....................       if(count == 4) break; 
0585:  MOVF   30,W
0586:  SUBLW  04
0587:  BTFSC  03.2
0588:  GOTO   688
....................       if(ultimo == miliseconds) continue; 
0589:  MOVF   29,W
058A:  SUBWF  45,W
058B:  BTFSS  03.2
058C:  GOTO   591
058D:  MOVF   2A,W
058E:  SUBWF  46,W
058F:  BTFSC  03.2
0590:  GOTO   585
....................       ultimo = miliseconds; 
0591:  MOVF   2A,W
0592:  MOVWF  46
0593:  MOVF   29,W
0594:  MOVWF  45
....................       seconds = (float)miliseconds / 1000.0f; 
0595:  MOVF   2A,W
0596:  MOVWF  49
0597:  MOVF   29,W
0598:  MOVWF  48
0599:  GOTO   1E0
059A:  MOVF   77,W
059B:  MOVWF  48
059C:  MOVF   78,W
059D:  MOVWF  49
059E:  MOVF   79,W
059F:  MOVWF  4A
05A0:  MOVF   7A,W
05A1:  MOVWF  4B
05A2:  MOVWF  4F
05A3:  MOVF   79,W
05A4:  MOVWF  4E
05A5:  MOVF   78,W
05A6:  MOVWF  4D
05A7:  MOVF   77,W
05A8:  MOVWF  4C
05A9:  CLRF   53
05AA:  CLRF   52
05AB:  MOVLW  7A
05AC:  MOVWF  51
05AD:  MOVLW  88
05AE:  MOVWF  50
05AF:  GOTO   1FF
05B0:  MOVF   7A,W
05B1:  MOVWF  44
05B2:  MOVF   79,W
05B3:  MOVWF  43
05B4:  MOVF   78,W
05B5:  MOVWF  42
05B6:  MOVF   77,W
05B7:  MOVWF  41
....................       if(tiempos[0] == 0) 
05B8:  MOVF   34,W
05B9:  MOVWF  4F
05BA:  MOVF   33,W
05BB:  MOVWF  4E
05BC:  MOVF   32,W
05BD:  MOVWF  4D
05BE:  MOVF   31,W
05BF:  MOVWF  4C
05C0:  CLRF   53
05C1:  CLRF   52
05C2:  CLRF   51
05C3:  CLRF   50
05C4:  CALL   2CB
05C5:  BTFSS  03.2
05C6:  GOTO   5D5
....................          show(1, 1, 'A', seconds); 
05C7:  MOVLW  01
05C8:  MOVWF  48
05C9:  MOVWF  49
05CA:  MOVLW  41
05CB:  MOVWF  4A
05CC:  MOVF   44,W
05CD:  MOVWF  4E
05CE:  MOVF   43,W
05CF:  MOVWF  4D
05D0:  MOVF   42,W
05D1:  MOVWF  4C
05D2:  MOVF   41,W
05D3:  MOVWF  4B
05D4:  CALL   4AC
....................     
....................       if(tiempos[1] == 0) 
05D5:  MOVF   38,W
05D6:  MOVWF  4F
05D7:  MOVF   37,W
05D8:  MOVWF  4E
05D9:  MOVF   36,W
05DA:  MOVWF  4D
05DB:  MOVF   35,W
05DC:  MOVWF  4C
05DD:  CLRF   53
05DE:  CLRF   52
05DF:  CLRF   51
05E0:  CLRF   50
05E1:  CALL   2CB
05E2:  BTFSS  03.2
05E3:  GOTO   5F3
....................          show(1, 2, 'B', seconds); 
05E4:  MOVLW  01
05E5:  MOVWF  48
05E6:  MOVLW  02
05E7:  MOVWF  49
05E8:  MOVLW  42
05E9:  MOVWF  4A
05EA:  MOVF   44,W
05EB:  MOVWF  4E
05EC:  MOVF   43,W
05ED:  MOVWF  4D
05EE:  MOVF   42,W
05EF:  MOVWF  4C
05F0:  MOVF   41,W
05F1:  MOVWF  4B
05F2:  CALL   4AC
....................           
....................       if(tiempos[2] == 0) 
05F3:  MOVF   3C,W
05F4:  MOVWF  4F
05F5:  MOVF   3B,W
05F6:  MOVWF  4E
05F7:  MOVF   3A,W
05F8:  MOVWF  4D
05F9:  MOVF   39,W
05FA:  MOVWF  4C
05FB:  CLRF   53
05FC:  CLRF   52
05FD:  CLRF   51
05FE:  CLRF   50
05FF:  CALL   2CB
0600:  BTFSS  03.2
0601:  GOTO   611
....................          show(17, 1, 'C', seconds); 
0602:  MOVLW  11
0603:  MOVWF  48
0604:  MOVLW  01
0605:  MOVWF  49
0606:  MOVLW  43
0607:  MOVWF  4A
0608:  MOVF   44,W
0609:  MOVWF  4E
060A:  MOVF   43,W
060B:  MOVWF  4D
060C:  MOVF   42,W
060D:  MOVWF  4C
060E:  MOVF   41,W
060F:  MOVWF  4B
0610:  CALL   4AC
....................           
....................       if(tiempos[3] == 0) 
0611:  MOVF   40,W
0612:  MOVWF  4F
0613:  MOVF   3F,W
0614:  MOVWF  4E
0615:  MOVF   3E,W
0616:  MOVWF  4D
0617:  MOVF   3D,W
0618:  MOVWF  4C
0619:  CLRF   53
061A:  CLRF   52
061B:  CLRF   51
061C:  CLRF   50
061D:  CALL   2CB
061E:  BTFSS  03.2
061F:  GOTO   62F
....................          show(17, 2, 'D', seconds); 
0620:  MOVLW  11
0621:  MOVWF  48
0622:  MOVLW  02
0623:  MOVWF  49
0624:  MOVLW  44
0625:  MOVWF  4A
0626:  MOVF   44,W
0627:  MOVWF  4E
0628:  MOVF   43,W
0629:  MOVWF  4D
062A:  MOVF   42,W
062B:  MOVWF  4C
062C:  MOVF   41,W
062D:  MOVWF  4B
062E:  CALL   4AC
....................       portB = input_B(); // PORTB0-B3 
062F:  MOVLW  FF
0630:  BSF    03.5
0631:  MOVWF  06
0632:  BCF    03.5
0633:  MOVF   06,W
0634:  MOVWF  2F
....................       for(int8 i = 0; i < 4; i++) 
0635:  CLRF   47
0636:  MOVF   47,W
0637:  SUBLW  03
0638:  BTFSS  03.0
0639:  GOTO   687
....................       { 
....................          if(portB & (0x01 << i) && tiempos[i] == 0){ 
063A:  MOVLW  01
063B:  MOVWF  77
063C:  MOVF   47,W
063D:  MOVWF  78
063E:  BTFSC  03.2
063F:  GOTO   644
0640:  BCF    03.0
0641:  RLF    77,F
0642:  DECFSZ 78,F
0643:  GOTO   640
0644:  MOVF   77,W
0645:  ANDWF  2F,W
0646:  BTFSC  03.2
0647:  GOTO   685
0648:  RLF    47,W
0649:  MOVWF  77
064A:  RLF    77,F
064B:  MOVLW  FC
064C:  ANDWF  77,F
064D:  MOVF   77,W
064E:  ADDLW  31
064F:  MOVWF  04
0650:  BCF    03.7
0651:  MOVF   00,W
0652:  MOVWF  48
0653:  INCF   04,F
0654:  MOVF   00,W
0655:  MOVWF  49
0656:  INCF   04,F
0657:  MOVF   00,W
0658:  MOVWF  4A
0659:  INCF   04,F
065A:  MOVF   00,W
065B:  MOVWF  4B
065C:  MOVWF  4F
065D:  MOVF   4A,W
065E:  MOVWF  4E
065F:  MOVF   49,W
0660:  MOVWF  4D
0661:  MOVF   48,W
0662:  MOVWF  4C
0663:  CLRF   53
0664:  CLRF   52
0665:  CLRF   51
0666:  CLRF   50
0667:  CALL   2CB
0668:  BTFSS  03.2
0669:  GOTO   685
....................             puestos[count++] = i; 
066A:  MOVF   30,W
066B:  INCF   30,F
066C:  ADDLW  2B
066D:  MOVWF  04
066E:  BCF    03.7
066F:  MOVF   47,W
0670:  MOVWF  00
....................             tiempos[i] = seconds; 
0671:  RLF    47,W
0672:  MOVWF  77
0673:  RLF    77,F
0674:  MOVLW  FC
0675:  ANDWF  77,F
0676:  MOVF   77,W
0677:  ADDLW  31
0678:  MOVWF  04
0679:  BCF    03.7
067A:  MOVF   41,W
067B:  MOVWF  00
067C:  INCF   04,F
067D:  MOVF   42,W
067E:  MOVWF  00
067F:  INCF   04,F
0680:  MOVF   43,W
0681:  MOVWF  00
0682:  INCF   04,F
0683:  MOVF   44,W
0684:  MOVWF  00
....................          } 
....................       } 
0685:  INCF   47,F
0686:  GOTO   636
....................  
....................    } 
0687:  GOTO   585
....................    //Disable interrupts 
....................    disable_interrupts(GLOBAL); 
0688:  BCF    0B.6
0689:  BCF    0B.7
068A:  BTFSC  0B.7
068B:  GOTO   689
....................    lcd_putc('\f'); 
068C:  MOVLW  0C
068D:  MOVWF  61
068E:  CALL   16D
....................    lcd_gotoxy(3,2); 
068F:  MOVLW  03
0690:  MOVWF  62
0691:  MOVLW  02
0692:  MOVWF  63
0693:  CALL   147
....................    printf(LCD_PUTC,"Resultados"); 
0694:  MOVLW  49
0695:  BSF    03.6
0696:  MOVWF  0D
0697:  MOVLW  00
0698:  MOVWF  0F
0699:  BCF    03.6
069A:  CALL   195
....................    delay_ms(500);    
069B:  MOVLW  02
069C:  MOVWF  48
069D:  MOVLW  FA
069E:  MOVWF  62
069F:  CALL   058
06A0:  DECFSZ 48,F
06A1:  GOTO   69D
....................    lcd_putc('\f'); 
06A2:  MOVLW  0C
06A3:  MOVWF  61
06A4:  CALL   16D
....................     
....................    printf(LCD_PUTC,"1=\n2="); 
06A5:  MOVLW  4F
06A6:  BSF    03.6
06A7:  MOVWF  0D
06A8:  MOVLW  00
06A9:  MOVWF  0F
06AA:  BCF    03.6
06AB:  CALL   195
....................    lcd_gotoxy(17,1); 
06AC:  MOVLW  11
06AD:  MOVWF  62
06AE:  MOVLW  01
06AF:  MOVWF  63
06B0:  CALL   147
....................    printf(LCD_PUTC,"3="); 
06B1:  MOVLW  33
06B2:  MOVWF  61
06B3:  CALL   16D
06B4:  MOVLW  3D
06B5:  MOVWF  61
06B6:  CALL   16D
....................    lcd_gotoxy(17,2); 
06B7:  MOVLW  11
06B8:  MOVWF  62
06B9:  MOVLW  02
06BA:  MOVWF  63
06BB:  CALL   147
....................    printf(LCD_PUTC,"4="); 
06BC:  MOVLW  34
06BD:  MOVWF  61
06BE:  CALL   16D
06BF:  MOVLW  3D
06C0:  MOVWF  61
06C1:  CALL   16D
....................     
....................    show2(4, 1,puestos[0] + 'A', tiempos[puestos[0]]); 
06C2:  MOVLW  41
06C3:  ADDWF  2B,W
06C4:  MOVWF  48
06C5:  RLF    2B,W
06C6:  MOVWF  77
06C7:  RLF    77,F
06C8:  MOVLW  FC
06C9:  ANDWF  77,F
06CA:  MOVF   77,W
06CB:  ADDLW  31
06CC:  MOVWF  04
06CD:  BCF    03.7
06CE:  MOVF   00,W
06CF:  MOVWF  49
06D0:  INCF   04,F
06D1:  MOVF   00,W
06D2:  MOVWF  4A
06D3:  INCF   04,F
06D4:  MOVF   00,W
06D5:  MOVWF  4B
06D6:  INCF   04,F
06D7:  MOVF   00,W
06D8:  MOVWF  4C
06D9:  MOVLW  04
06DA:  MOVWF  4D
06DB:  MOVLW  01
06DC:  MOVWF  4E
06DD:  MOVF   48,W
06DE:  MOVWF  4F
06DF:  MOVF   4C,W
06E0:  MOVWF  53
06E1:  MOVF   4B,W
06E2:  MOVWF  52
06E3:  MOVF   4A,W
06E4:  MOVWF  51
06E5:  MOVF   49,W
06E6:  MOVWF  50
06E7:  CALL   4CB
....................    show2(4, 2,puestos[1] + 'A', tiempos[puestos[1]]); 
06E8:  MOVLW  41
06E9:  ADDWF  2C,W
06EA:  MOVWF  48
06EB:  RLF    2C,W
06EC:  MOVWF  77
06ED:  RLF    77,F
06EE:  MOVLW  FC
06EF:  ANDWF  77,F
06F0:  MOVF   77,W
06F1:  ADDLW  31
06F2:  MOVWF  04
06F3:  BCF    03.7
06F4:  MOVF   00,W
06F5:  MOVWF  49
06F6:  INCF   04,F
06F7:  MOVF   00,W
06F8:  MOVWF  4A
06F9:  INCF   04,F
06FA:  MOVF   00,W
06FB:  MOVWF  4B
06FC:  INCF   04,F
06FD:  MOVF   00,W
06FE:  MOVWF  4C
06FF:  MOVLW  04
0700:  MOVWF  4D
0701:  MOVLW  02
0702:  MOVWF  4E
0703:  MOVF   48,W
0704:  MOVWF  4F
0705:  MOVF   4C,W
0706:  MOVWF  53
0707:  MOVF   4B,W
0708:  MOVWF  52
0709:  MOVF   4A,W
070A:  MOVWF  51
070B:  MOVF   49,W
070C:  MOVWF  50
070D:  CALL   4CB
....................    show2(20, 1,puestos[2] + 'A', tiempos[puestos[2]]); 
070E:  MOVLW  41
070F:  ADDWF  2D,W
0710:  MOVWF  48
0711:  RLF    2D,W
0712:  MOVWF  77
0713:  RLF    77,F
0714:  MOVLW  FC
0715:  ANDWF  77,F
0716:  MOVF   77,W
0717:  ADDLW  31
0718:  MOVWF  04
0719:  BCF    03.7
071A:  MOVF   00,W
071B:  MOVWF  49
071C:  INCF   04,F
071D:  MOVF   00,W
071E:  MOVWF  4A
071F:  INCF   04,F
0720:  MOVF   00,W
0721:  MOVWF  4B
0722:  INCF   04,F
0723:  MOVF   00,W
0724:  MOVWF  4C
0725:  MOVLW  14
0726:  MOVWF  4D
0727:  MOVLW  01
0728:  MOVWF  4E
0729:  MOVF   48,W
072A:  MOVWF  4F
072B:  MOVF   4C,W
072C:  MOVWF  53
072D:  MOVF   4B,W
072E:  MOVWF  52
072F:  MOVF   4A,W
0730:  MOVWF  51
0731:  MOVF   49,W
0732:  MOVWF  50
0733:  CALL   4CB
....................    show2(20, 2,puestos[3] + 'A', tiempos[puestos[3]]); 
0734:  MOVLW  41
0735:  ADDWF  2E,W
0736:  MOVWF  48
0737:  RLF    2E,W
0738:  MOVWF  77
0739:  RLF    77,F
073A:  MOVLW  FC
073B:  ANDWF  77,F
073C:  MOVF   77,W
073D:  ADDLW  31
073E:  MOVWF  04
073F:  BCF    03.7
0740:  MOVF   00,W
0741:  MOVWF  49
0742:  INCF   04,F
0743:  MOVF   00,W
0744:  MOVWF  4A
0745:  INCF   04,F
0746:  MOVF   00,W
0747:  MOVWF  4B
0748:  INCF   04,F
0749:  MOVF   00,W
074A:  MOVWF  4C
074B:  MOVLW  14
074C:  MOVWF  4D
074D:  MOVLW  02
074E:  MOVWF  4E
074F:  MOVF   48,W
0750:  MOVWF  4F
0751:  MOVF   4C,W
0752:  MOVWF  53
0753:  MOVF   4B,W
0754:  MOVWF  52
0755:  MOVF   4A,W
0756:  MOVWF  51
0757:  MOVF   49,W
0758:  MOVWF  50
0759:  CALL   4CB
....................    // Muestra resultados; 
....................  
.................... } 
....................  
.................... void show(int x, int y, char nadador, float time){ 
....................    lcd_gotoxy(x,y); 
*
04AC:  MOVF   48,W
04AD:  MOVWF  62
04AE:  MOVF   49,W
04AF:  MOVWF  63
04B0:  CALL   147
*
075A:  SLEEP
....................    printf(LCD_PUTC, "%c = %.2f", nadador, time); 
*
04B1:  MOVF   4A,W
04B2:  MOVWF  61
04B3:  CALL   16D
04B4:  MOVLW  20
04B5:  MOVWF  61
04B6:  CALL   16D
04B7:  MOVLW  3D
04B8:  MOVWF  61
04B9:  CALL   16D
04BA:  MOVLW  20
04BB:  MOVWF  61
04BC:  CALL   16D
04BD:  MOVLW  89
04BE:  MOVWF  04
04BF:  MOVF   4E,W
04C0:  MOVWF  57
04C1:  MOVF   4D,W
04C2:  MOVWF  56
04C3:  MOVF   4C,W
04C4:  MOVWF  55
04C5:  MOVF   4B,W
04C6:  MOVWF  54
04C7:  MOVLW  02
04C8:  MOVWF  58
04C9:  CALL   359
.................... } 
04CA:  RETURN
....................  
.................... void show2(int x, int y, char nadador, float time){ 
....................    lcd_gotoxy(x,y); 
04CB:  MOVF   4D,W
04CC:  MOVWF  62
04CD:  MOVF   4E,W
04CE:  MOVWF  63
04CF:  CALL   147
....................    printf(LCD_PUTC, "%c -> %.2f", nadador, time); 
04D0:  MOVF   4F,W
04D1:  MOVWF  61
04D2:  CALL   16D
04D3:  MOVLW  53
04D4:  BSF    03.6
04D5:  MOVWF  0D
04D6:  MOVLW  00
04D7:  MOVWF  0F
04D8:  BCF    03.0
04D9:  MOVLW  04
04DA:  BCF    03.6
04DB:  MOVWF  54
*
052F:  MOVLW  89
0530:  MOVWF  04
0531:  MOVF   53,W
0532:  MOVWF  57
0533:  MOVF   52,W
0534:  MOVWF  56
0535:  MOVF   51,W
0536:  MOVWF  55
0537:  MOVF   50,W
0538:  MOVWF  54
0539:  MOVLW  02
053A:  MOVWF  58
053B:  CALL   359
.................... } 
053C:  RETURN
....................  

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
