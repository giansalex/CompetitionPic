CCS PCM C Compiler, Version 4.130, 59972               22-ene.-17 18:32

               Filename: B:\Giancarlos\Documentos\Proteus 8\Ecuador\main.lst

               ROM used: 1597 words (19%)
                         Largest free fragment is 2048
               RAM used: 50 (14%) at main() level
                         77 (21%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4A6
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   037
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #device adc=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(clock=4M) 
*
004F:  MOVLW  5C
0050:  MOVWF  04
0051:  BCF    03.7
0052:  MOVF   00,W
0053:  BTFSC  03.2
0054:  GOTO   063
0055:  MOVLW  01
0056:  MOVWF  78
0057:  CLRF   77
0058:  DECFSZ 77,F
0059:  GOTO   058
005A:  DECFSZ 78,F
005B:  GOTO   057
005C:  MOVLW  4A
005D:  MOVWF  77
005E:  DECFSZ 77,F
005F:  GOTO   05E
0060:  GOTO   061
0061:  DECFSZ 00,F
0062:  GOTO   055
0063:  RETURN
....................  
.................... #include <lcd420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
0071:  MOVLW  F0
0072:  BSF    03.5
0073:  MOVWF  06
....................       lcd.rw = 1; 
0074:  BCF    03.5
0075:  BSF    06.2
....................       delay_cycles(1); 
0076:  NOP
....................       lcd.enable = 1; 
0077:  BSF    06.0
....................       delay_cycles(1); 
0078:  NOP
....................       high = lcd.data; 
0079:  MOVF   06,W
007A:  SWAPF  06,W
007B:  ANDLW  0F
007C:  MOVWF  62
....................       lcd.enable = 0; 
007D:  BCF    06.0
....................       delay_cycles(1); 
007E:  NOP
....................       lcd.enable = 1; 
007F:  BSF    06.0
....................       delay_us(1); 
0080:  NOP
....................       low = lcd.data; 
0081:  MOVF   06,W
0082:  SWAPF  06,W
0083:  ANDLW  0F
0084:  MOVWF  61
....................       lcd.enable = 0; 
0085:  BCF    06.0
....................       set_tris_b(LCD_WRITE); 
0086:  MOVLW  00
0087:  BSF    03.5
0088:  MOVWF  06
....................       return( (high<<4) | low); 
0089:  BCF    03.5
008A:  SWAPF  62,W
008B:  MOVWF  77
008C:  MOVLW  F0
008D:  ANDWF  77,F
008E:  MOVF   77,W
008F:  IORWF  61,W
0090:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0064:  SWAPF  62,W
0065:  ANDLW  F0
0066:  MOVWF  77
0067:  MOVLW  0F
0068:  ANDWF  06,W
0069:  IORWF  77,W
006A:  MOVWF  06
....................       delay_cycles(1); 
006B:  NOP
....................       lcd.enable = 1; 
006C:  BSF    06.0
....................       delay_us(2); 
006D:  GOTO   06E
....................       lcd.enable = 0; 
006E:  BCF    06.0
.................... } 
006F:  RETURN
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0070:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0091:  MOVF   78,W
0092:  MOVWF  61
0093:  BTFSC  61.7
0094:  GOTO   071
....................       lcd.rs = address; 
0095:  BTFSS  5F.0
0096:  BCF    06.1
0097:  BTFSC  5F.0
0098:  BSF    06.1
....................       delay_cycles(1); 
0099:  NOP
....................       lcd.rw = 0; 
009A:  BCF    06.2
....................       delay_cycles(1); 
009B:  NOP
....................       lcd.enable = 0; 
009C:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
009D:  SWAPF  60,W
009E:  MOVWF  61
009F:  MOVLW  0F
00A0:  ANDWF  61,F
00A1:  MOVF   61,W
00A2:  MOVWF  62
00A3:  CALL   064
....................       lcd_send_nibble(n & 0xf); 
00A4:  MOVF   60,W
00A5:  ANDLW  0F
00A6:  MOVWF  61
00A7:  MOVWF  62
00A8:  CALL   064
.................... } 
00A9:  RETURN
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
00AA:  MOVLW  00
00AB:  BSF    03.5
00AC:  MOVWF  06
....................     lcd.rs = 0; 
00AD:  BCF    03.5
00AE:  BCF    06.1
....................     lcd.rw = 0; 
00AF:  BCF    06.2
....................     lcd.enable = 0; 
00B0:  BCF    06.0
....................     delay_ms(15); 
00B1:  MOVLW  0F
00B2:  MOVWF  5C
00B3:  CALL   04F
....................     for(i=1;i<=3;++i) { 
00B4:  MOVLW  01
00B5:  MOVWF  48
00B6:  MOVF   48,W
00B7:  SUBLW  03
00B8:  BTFSS  03.0
00B9:  GOTO   0C2
....................        lcd_send_nibble(3); 
00BA:  MOVLW  03
00BB:  MOVWF  62
00BC:  CALL   064
....................        delay_ms(5); 
00BD:  MOVLW  05
00BE:  MOVWF  5C
00BF:  CALL   04F
....................     } 
00C0:  INCF   48,F
00C1:  GOTO   0B6
....................     lcd_send_nibble(2); 
00C2:  MOVLW  02
00C3:  MOVWF  62
00C4:  CALL   064
....................     for(i=0;i<=3;++i) 
00C5:  CLRF   48
00C6:  MOVF   48,W
00C7:  SUBLW  03
00C8:  BTFSS  03.0
00C9:  GOTO   0D3
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
00CA:  MOVF   48,W
00CB:  CALL   02F
00CC:  MOVWF  49
00CD:  CLRF   5F
00CE:  MOVF   49,W
00CF:  MOVWF  60
00D0:  CALL   070
00D1:  INCF   48,F
00D2:  GOTO   0C6
.................... } 
00D3:  BCF    0A.3
00D4:  BCF    0A.4
00D5:  GOTO   4D2 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
00D6:  MOVLW  01
00D7:  SUBWF  5D,W
00D8:  ADDLW  FC
00D9:  BTFSC  03.0
00DA:  GOTO   0E9
00DB:  ADDLW  04
00DC:  GOTO   0F1
....................      case 1 : address=0x80;break; 
00DD:  MOVLW  80
00DE:  MOVWF  5E
00DF:  GOTO   0E9
....................      case 2 : address=0xc0;break; 
00E0:  MOVLW  C0
00E1:  MOVWF  5E
00E2:  GOTO   0E9
....................      case 3 : address=0x94;break; 
00E3:  MOVLW  94
00E4:  MOVWF  5E
00E5:  GOTO   0E9
....................      case 4 : address=0xd4;break; 
00E6:  MOVLW  D4
00E7:  MOVWF  5E
00E8:  GOTO   0E9
....................    } 
....................    address+=x-1; 
00E9:  MOVLW  01
00EA:  SUBWF  5C,W
00EB:  ADDWF  5E,F
....................    lcd_send_byte(0,address); 
00EC:  CLRF   5F
00ED:  MOVF   5E,W
00EE:  MOVWF  60
00EF:  CALL   070
.................... } 
00F0:  RETURN
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00F9:  MOVF   5B,W
00FA:  XORLW  0C
00FB:  BTFSC  03.2
00FC:  GOTO   104
00FD:  XORLW  06
00FE:  BTFSC  03.2
00FF:  GOTO   10E
0100:  XORLW  02
0101:  BTFSC  03.2
0102:  GOTO   115
0103:  GOTO   11A
....................      case '\f'   : lcd_send_byte(0,1); 
0104:  CLRF   5F
0105:  MOVLW  01
0106:  MOVWF  60
0107:  CALL   070
....................                    lcdline=1; 
0108:  MOVLW  01
0109:  MOVWF  27
....................                    delay_ms(2); 
010A:  MOVLW  02
010B:  MOVWF  5C
010C:  CALL   04F
....................                                            break; 
010D:  GOTO   120
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
010E:  INCF   27,F
010F:  MOVLW  01
0110:  MOVWF  5C
0111:  MOVF   27,W
0112:  MOVWF  5D
0113:  CALL   0D6
0114:  GOTO   120
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0115:  CLRF   5F
0116:  MOVLW  10
0117:  MOVWF  60
0118:  CALL   070
0119:  GOTO   120
....................      default     : lcd_send_byte(1,c);     break; 
011A:  MOVLW  01
011B:  MOVWF  5F
011C:  MOVF   5B,W
011D:  MOVWF  60
011E:  CALL   070
011F:  GOTO   120
....................    } 
.................... } 
0120:  RETURN
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #define TIMER_VALUE 100 // 10ms = 4 * 64 * (256 - x) / 4Mhz   => x  = 99.75  
....................  
.................... int16 miliseconds = 0; // guarda los milisegundos del timer. 
....................  
.................... #INT_TIMER0   //Activa la interrupcion, por Timer  
.................... void timer0_isr() 
.................... { 
....................    miliseconds += 10; // Aumenta 10ms. 
*
0037:  MOVLW  0A
0038:  ADDWF  28,F
0039:  BTFSC  03.0
003A:  INCF   29,F
....................    set_timer0(TIMER_VALUE); // carga del timer para 10ms. 
003B:  MOVLW  64
003C:  MOVWF  01
.................... } 
....................  
003D:  BCF    0B.2
003E:  BCF    0A.3
003F:  BCF    0A.4
0040:  GOTO   01B
.................... void main() 
.................... { 
*
04A6:  CLRF   04
04A7:  BCF    03.7
04A8:  MOVLW  1F
04A9:  ANDWF  03,F
04AA:  CLRF   29
04AB:  CLRF   28
04AC:  BSF    03.5
04AD:  BSF    03.6
04AE:  MOVF   09,W
04AF:  ANDLW  C0
04B0:  MOVWF  09
04B1:  BCF    03.6
04B2:  BCF    1F.4
04B3:  BCF    1F.5
04B4:  MOVLW  00
04B5:  BSF    03.6
04B6:  MOVWF  08
04B7:  BCF    03.5
04B8:  CLRF   07
04B9:  CLRF   08
04BA:  CLRF   09
04BB:  BCF    03.6
04BC:  CLRF   2B
....................    // Variables 
....................    int8 portD, count = 0, i; 
....................    int8 puestos[] = {0,0,0,0}; // Almacena los puestos 
04BD:  CLRF   2D
04BE:  CLRF   2E
04BF:  CLRF   2F
04C0:  CLRF   30
....................    float tiempos[] = {0,0,0,0}; // Almacena los tiempos segun el puesto. 
04C1:  CLRF   31
04C2:  CLRF   32
04C3:  CLRF   33
04C4:  CLRF   34
04C5:  CLRF   35
04C6:  CLRF   36
04C7:  CLRF   37
04C8:  CLRF   38
04C9:  CLRF   39
04CA:  CLRF   3A
04CB:  CLRF   3B
04CC:  CLRF   3C
04CD:  CLRF   3D
04CE:  CLRF   3E
04CF:  CLRF   3F
04D0:  CLRF   40
....................    int16 ultimo; 
....................    float seconds; 
....................     
....................    // Inicializacion del LCD 4x16 
....................    lcd_init(); 
04D1:  GOTO   0AA
....................     
....................    // Input pins 
....................    set_tris_d(0xFF); // Puerto D como entradas. 
04D2:  MOVLW  FF
04D3:  BSF    03.5
04D4:  MOVWF  08
....................     
....................    // Interrupcion Timer 0 
....................    setup_timer_0(T0_INTERNAL|T0_DIV_64); // Prescaler = 64 
04D5:  MOVF   01,W
04D6:  ANDLW  C0
04D7:  IORLW  05
04D8:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); //habilitar la interrupcion del timer0 
04D9:  BCF    03.5
04DA:  BSF    0B.5
....................  
....................    lcd_putc("Presione START"); 
04DB:  MOVLW  41
04DC:  BSF    03.6
04DD:  MOVWF  0D
04DE:  MOVLW  00
04DF:  MOVWF  0F
04E0:  BCF    03.6
04E1:  CALL   121
....................    while (!input(PIN_D7)); // Espera que pulse START. 
04E2:  BSF    03.5
04E3:  BSF    08.7
04E4:  BCF    03.5
04E5:  BTFSS  08.7
04E6:  GOTO   4E2
....................    lcd_putc('\f'); 
04E7:  MOVLW  0C
04E8:  MOVWF  5B
04E9:  CALL   0F9
....................    enable_interrupts(GLOBAL);// Pone en marcha todas las interrupaciones. 
04EA:  MOVLW  C0
04EB:  IORWF  0B,F
....................    set_timer0(TIMER_VALUE); // carga del timer para 10ms 
04EC:  MOVLW  64
04ED:  MOVWF  01
....................     
....................    while(TRUE) 
....................    { 
....................       if(count == 4) break; // Comprueba que todos los nadadores hayan terminado. 
04EE:  MOVF   2B,W
04EF:  SUBLW  04
04F0:  BTFSC  03.2
04F1:  GOTO   5C9
....................       if(ultimo == miliseconds) continue; 
04F2:  MOVF   28,W
04F3:  SUBWF  41,W
04F4:  BTFSS  03.2
04F5:  GOTO   4FA
04F6:  MOVF   29,W
04F7:  SUBWF  42,W
04F8:  BTFSC  03.2
04F9:  GOTO   4EE
....................       ultimo = miliseconds; 
04FA:  MOVF   29,W
04FB:  MOVWF  42
04FC:  MOVF   28,W
04FD:  MOVWF  41
....................       seconds = (float)miliseconds / 1000.0f; // Calcula los segundos. 
04FE:  MOVF   29,W
04FF:  MOVWF  49
0500:  MOVF   28,W
0501:  MOVWF  48
0502:  GOTO   16C
0503:  MOVF   77,W
0504:  MOVWF  48
0505:  MOVF   78,W
0506:  MOVWF  49
0507:  MOVF   79,W
0508:  MOVWF  4A
0509:  MOVF   7A,W
050A:  MOVWF  4B
050B:  MOVWF  4F
050C:  MOVF   79,W
050D:  MOVWF  4E
050E:  MOVF   78,W
050F:  MOVWF  4D
0510:  MOVF   77,W
0511:  MOVWF  4C
0512:  CLRF   53
0513:  CLRF   52
0514:  MOVLW  7A
0515:  MOVWF  51
0516:  MOVLW  88
0517:  MOVWF  50
0518:  GOTO   18B
0519:  MOVF   7A,W
051A:  MOVWF  46
051B:  MOVF   79,W
051C:  MOVWF  45
051D:  MOVF   78,W
051E:  MOVWF  44
051F:  MOVF   77,W
0520:  MOVWF  43
....................        
....................       // Imprime los tiempos de cada nadador que estan compitiendo. 
....................       for(i = 0; i< 4; i++){ 
0521:  CLRF   2C
0522:  MOVF   2C,W
0523:  SUBLW  03
0524:  BTFSS  03.0
0525:  GOTO   570
....................          if(tiempos[i] == 0){ // Comprueba que el nadador aun siga compitiendo. 
0526:  RLF    2C,W
0527:  MOVWF  77
0528:  RLF    77,F
0529:  MOVLW  FC
052A:  ANDWF  77,F
052B:  MOVF   77,W
052C:  ADDLW  31
052D:  MOVWF  04
052E:  BCF    03.7
052F:  MOVF   00,W
0530:  MOVWF  48
0531:  INCF   04,F
0532:  MOVF   00,W
0533:  MOVWF  49
0534:  INCF   04,F
0535:  MOVF   00,W
0536:  MOVWF  4A
0537:  INCF   04,F
0538:  MOVF   00,W
0539:  MOVWF  4B
053A:  MOVWF  4F
053B:  MOVF   4A,W
053C:  MOVWF  4E
053D:  MOVF   49,W
053E:  MOVWF  4D
053F:  MOVF   48,W
0540:  MOVWF  4C
0541:  CLRF   53
0542:  CLRF   52
0543:  CLRF   51
0544:  CLRF   50
0545:  CALL   257
0546:  BTFSS  03.2
0547:  GOTO   56E
....................             lcd_gotoxy(1, i + 1); 
0548:  MOVLW  01
0549:  ADDWF  2C,W
054A:  MOVWF  48
054B:  MOVLW  01
054C:  MOVWF  5C
054D:  MOVF   48,W
054E:  MOVWF  5D
054F:  CALL   0D6
....................             printf(LCD_PUTC,"%c = %.2f\n", i + 'A', seconds); 
0550:  MOVLW  41
0551:  ADDWF  2C,W
0552:  MOVWF  48
0553:  MOVWF  5B
0554:  CALL   0F9
0555:  MOVLW  20
0556:  MOVWF  5B
0557:  CALL   0F9
0558:  MOVLW  3D
0559:  MOVWF  5B
055A:  CALL   0F9
055B:  MOVLW  20
055C:  MOVWF  5B
055D:  CALL   0F9
055E:  MOVLW  89
055F:  MOVWF  04
0560:  MOVF   46,W
0561:  MOVWF  51
0562:  MOVF   45,W
0563:  MOVWF  50
0564:  MOVF   44,W
0565:  MOVWF  4F
0566:  MOVF   43,W
0567:  MOVWF  4E
0568:  MOVLW  02
0569:  MOVWF  52
056A:  CALL   2E5
056B:  MOVLW  0A
056C:  MOVWF  5B
056D:  CALL   0F9
....................          } 
....................       } 
056E:  INCF   2C,F
056F:  GOTO   522
....................        
....................       //Comprueba si se pulso una tecla 
....................       portD = input_D(); // PORTB0-B3 
0570:  MOVLW  FF
0571:  BSF    03.5
0572:  MOVWF  08
0573:  BCF    03.5
0574:  MOVF   08,W
0575:  MOVWF  2A
....................       for(i = 0; i < 4; i++) 
0576:  CLRF   2C
0577:  MOVF   2C,W
0578:  SUBLW  03
0579:  BTFSS  03.0
057A:  GOTO   5C8
....................       { 
....................          if(portD & (0x01 << i) && tiempos[i] == 0){ // Evita que un nadador pulse mas de una vez. 
057B:  MOVLW  01
057C:  MOVWF  77
057D:  MOVF   2C,W
057E:  MOVWF  78
057F:  BTFSC  03.2
0580:  GOTO   585
0581:  BCF    03.0
0582:  RLF    77,F
0583:  DECFSZ 78,F
0584:  GOTO   581
0585:  MOVF   77,W
0586:  ANDWF  2A,W
0587:  BTFSC  03.2
0588:  GOTO   5C6
0589:  RLF    2C,W
058A:  MOVWF  77
058B:  RLF    77,F
058C:  MOVLW  FC
058D:  ANDWF  77,F
058E:  MOVF   77,W
058F:  ADDLW  31
0590:  MOVWF  04
0591:  BCF    03.7
0592:  MOVF   00,W
0593:  MOVWF  48
0594:  INCF   04,F
0595:  MOVF   00,W
0596:  MOVWF  49
0597:  INCF   04,F
0598:  MOVF   00,W
0599:  MOVWF  4A
059A:  INCF   04,F
059B:  MOVF   00,W
059C:  MOVWF  4B
059D:  MOVWF  4F
059E:  MOVF   4A,W
059F:  MOVWF  4E
05A0:  MOVF   49,W
05A1:  MOVWF  4D
05A2:  MOVF   48,W
05A3:  MOVWF  4C
05A4:  CLRF   53
05A5:  CLRF   52
05A6:  CLRF   51
05A7:  CLRF   50
05A8:  CALL   257
05A9:  BTFSS  03.2
05AA:  GOTO   5C6
....................             puestos[count++] = i; // guarda la posicion del nadador. 
05AB:  MOVF   2B,W
05AC:  INCF   2B,F
05AD:  ADDLW  2D
05AE:  MOVWF  04
05AF:  BCF    03.7
05B0:  MOVF   2C,W
05B1:  MOVWF  00
....................             tiempos[i] = seconds; // guarda el tiempo del nadador X. 
05B2:  RLF    2C,W
05B3:  MOVWF  77
05B4:  RLF    77,F
05B5:  MOVLW  FC
05B6:  ANDWF  77,F
05B7:  MOVF   77,W
05B8:  ADDLW  31
05B9:  MOVWF  04
05BA:  BCF    03.7
05BB:  MOVF   43,W
05BC:  MOVWF  00
05BD:  INCF   04,F
05BE:  MOVF   44,W
05BF:  MOVWF  00
05C0:  INCF   04,F
05C1:  MOVF   45,W
05C2:  MOVWF  00
05C3:  INCF   04,F
05C4:  MOVF   46,W
05C5:  MOVWF  00
....................          } 
....................       } 
05C6:  INCF   2C,F
05C7:  GOTO   577
....................  
....................    } 
05C8:  GOTO   4EE
....................    //Disable interrupts 
....................    disable_interrupts(GLOBAL); 
05C9:  BCF    0B.6
05CA:  BCF    0B.7
05CB:  BTFSC  0B.7
05CC:  GOTO   5CA
....................     
....................    lcd_putc('\f'); 
05CD:  MOVLW  0C
05CE:  MOVWF  5B
05CF:  CALL   0F9
....................    lcd_gotoxy(3,2); 
05D0:  MOVLW  03
05D1:  MOVWF  5C
05D2:  MOVLW  02
05D3:  MOVWF  5D
05D4:  CALL   0D6
....................    lcd_putc("Resultados"); 
05D5:  MOVLW  49
05D6:  BSF    03.6
05D7:  MOVWF  0D
05D8:  MOVLW  00
05D9:  MOVWF  0F
05DA:  BCF    03.6
05DB:  CALL   121
....................    delay_ms(500);    
05DC:  MOVLW  02
05DD:  MOVWF  48
05DE:  MOVLW  FA
05DF:  MOVWF  5C
05E0:  CALL   04F
05E1:  DECFSZ 48,F
05E2:  GOTO   5DE
....................    lcd_putc('\f'); 
05E3:  MOVLW  0C
05E4:  MOVWF  5B
05E5:  CALL   0F9
....................     
....................    // Muestra los resultados. 
....................    for(i=0;i<4;i++){ 
05E6:  CLRF   2C
05E7:  MOVF   2C,W
05E8:  SUBLW  03
05E9:  BTFSS  03.0
05EA:  GOTO   63C
....................       int8 nadador = puestos[i]; 
05EB:  MOVLW  2D
05EC:  ADDWF  2C,W
05ED:  MOVWF  04
05EE:  BCF    03.7
05EF:  MOVF   00,W
05F0:  MOVWF  47
....................       lcd_gotoxy(1, i + 1); 
05F1:  MOVLW  01
05F2:  ADDWF  2C,W
05F3:  MOVWF  48
05F4:  MOVLW  01
05F5:  MOVWF  5C
05F6:  MOVF   48,W
05F7:  MOVWF  5D
05F8:  CALL   0D6
....................       printf(LCD_PUTC, "%d.- %c = %.2f", i + 1, nadador + 'A', tiempos[nadador] ); 
05F9:  MOVLW  01
05FA:  ADDWF  2C,W
05FB:  MOVWF  48
05FC:  MOVLW  41
05FD:  ADDWF  47,W
05FE:  MOVWF  49
05FF:  RLF    47,W
0600:  MOVWF  77
0601:  RLF    77,F
0602:  MOVLW  FC
0603:  ANDWF  77,F
0604:  MOVF   77,W
0605:  ADDLW  31
0606:  MOVWF  04
0607:  BCF    03.7
0608:  MOVF   00,W
0609:  MOVWF  4A
060A:  INCF   04,F
060B:  MOVF   00,W
060C:  MOVWF  4B
060D:  INCF   04,F
060E:  MOVF   00,W
060F:  MOVWF  4C
0610:  INCF   04,F
0611:  MOVF   00,W
0612:  MOVWF  4D
0613:  MOVF   48,W
0614:  MOVWF  4E
0615:  MOVLW  18
0616:  MOVWF  4F
0617:  GOTO   44D
0618:  MOVLW  2E
0619:  MOVWF  5B
061A:  CALL   0F9
061B:  MOVLW  2D
061C:  MOVWF  5B
061D:  CALL   0F9
061E:  MOVLW  20
061F:  MOVWF  5B
0620:  CALL   0F9
0621:  MOVF   49,W
0622:  MOVWF  5B
0623:  CALL   0F9
0624:  MOVLW  20
0625:  MOVWF  5B
0626:  CALL   0F9
0627:  MOVLW  3D
0628:  MOVWF  5B
0629:  CALL   0F9
062A:  MOVLW  20
062B:  MOVWF  5B
062C:  CALL   0F9
062D:  MOVLW  89
062E:  MOVWF  04
062F:  MOVF   4D,W
0630:  MOVWF  51
0631:  MOVF   4C,W
0632:  MOVWF  50
0633:  MOVF   4B,W
0634:  MOVWF  4F
0635:  MOVF   4A,W
0636:  MOVWF  4E
0637:  MOVLW  02
0638:  MOVWF  52
0639:  CALL   2E5
....................    } 
063A:  INCF   2C,F
063B:  GOTO   5E7
....................  
.................... } 
....................  
063C:  SLEEP

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
